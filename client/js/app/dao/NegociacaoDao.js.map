{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","cursor","openCursor","listaNegociacoes","atual","result","dado","value","push","Negociacao","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;IAAMA,a;AAEF,2BAAYC,UAAZ,EAAuB;AAAA;;AACnB,aAAKC,WAAL,GAAmBD,UAAnB;AACA,aAAKE,MAAL,GAAc,aAAd;AACH;;;;iCAEQC,U,EAAW;AAAA;;AAChB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AACjC;AACA,oBAAIC,UAAU,MAAKN,WAAL,CACVO,WADU,CACE,CAAC,MAAKN,MAAN,CADF,EACiB,WADjB,EAEVO,WAFU,CAEE,MAAKP,MAFP,EAGVQ,GAHU,CAGNP,UAHM,CAAd;;AAKGI,wBAAQI,SAAR,GAAoB,aAAK;AACrBN,8BADqB,CACX;AACb,iBAFD;;AAIAE,wBAAQK,OAAR,GAAkB,aAAK;AACnBC,4BAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,2BAAO,0CAAP;AACH,iBAHD;AAIP,aAfM,CAAP;AAgBH;;;sCAEY;AAAA;;AACT,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;AACnC,oBAAIY,SAAS,OAAKjB,WAAL,CACIO,WADJ,CACgB,CAAC,OAAKN,MAAN,CADhB,EAC+B,WAD/B,EAEIO,WAFJ,CAEgB,OAAKP,MAFrB,EAGIiB,UAHJ,EAAb;;AAKA,oBAAIC,mBAAmB,EAAvB;;AAEAF,uBAAOP,SAAP,GAAmB,aAAI;AACnB;AACA,wBAAIU,QAAQN,EAAEC,MAAF,CAASM,MAArB;AACA,wBAAGD,KAAH,EAAS;AACL;AACA,4BAAIE,OAAOF,MAAMG,KAAjB;AACAJ,yCAAiBK,IAAjB,CAAsB,IAAIC,UAAJ,CAAeH,KAAKI,KAApB,EAA2BJ,KAAKK,WAAhC,EAA6CL,KAAKM,MAAlD,CAAtB;AACA;AACA;AACAR,8BAAMS,QAAN;AACH,qBAPD,MAOM;AACFzB,gCAAQe,gBAAR;AACH;AACJ,iBAbD;;AAeAF,uBAAON,OAAP,GAAiB,aAAI;AACjBC,4BAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,2BAAO,wCAAP;AACH,iBAHD;AAIH,aA3BM,CAAP;AA4BH;;;qCAEW;AAAA;;AACR,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;AACnC,oBAAIC,UAAU,OAAKN,WAAL,CACLO,WADK,CACO,CAAC,OAAKN,MAAN,CADP,EACsB,WADtB,EAELO,WAFK,CAEO,OAAKP,MAFZ,EAGL6B,KAHK,EAAd;AAIAxB,wBAAQI,SAAR,GAAoB,aAAK;AACrBN,4BAAQ,0BAAR;AACH,iBAFD;;AAIAE,wBAAQK,OAAR,GAAkB,aAAK;AACnBC,4BAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,2BAAO,0CAAP;AACH,iBAHD;AAIH,aAbM,CAAP;AAcH","file":"NegociacaoDao.js","sourcesContent":["class NegociacaoDao{\r\n\r\n    constructor(connection){\r\n        this._connection = connection;\r\n        this._store = 'negociacoes';\r\n    }\r\n\r\n    adiciona(negociacao){\r\n        return new Promise((resolve, reject)=>{\r\n             //Abre uma transacao de leitura e escrita para o objeto negociacoes\r\n             let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .add(negociacao);\r\n\r\n                request.onsuccess = e => {\r\n                    resolve();//Neste caso nao esta retornando nada dentro do resolve\r\n                };\r\n\r\n                request.onerror = e => {\r\n                    console.log(e.target.error);\r\n                    reject('Nao foi possivel adicionar a negociacao!');\r\n                };\r\n        });\r\n    }\r\n\r\n    listarTodos(){\r\n        return new Promise((resolve, reject) =>{\r\n            let cursor = this._connection\r\n                            .transaction([this._store], 'readwrite')\r\n                            .objectStore(this._store)\r\n                            .openCursor();\r\n\r\n            let listaNegociacoes = [];\r\n\r\n            cursor.onsuccess = e =>{\r\n                //Aponta para o primeiro elemento que esta gravado\r\n                let atual = e.target.result;\r\n                if(atual){\r\n                    //Retorna as propridades que foram guardadas\r\n                    var dado = atual.value;   \r\n                    listaNegociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\r\n                    //Aponta para o proximo elemento gravado\r\n                    //e chama novamente o evento onsuccess\r\n                    atual.continue();\r\n                }else {\r\n                    resolve(listaNegociacoes);\r\n                }\r\n            };\r\n\r\n            cursor.onerror = e =>{\r\n                console.log(e.target.error);\r\n                reject('Nao foi possivel listar as negociacoes');\r\n            };\r\n        });\r\n    }\r\n\r\n    apagaTodos(){\r\n        return new Promise((resolve, reject) =>{\r\n            let request = this._connection\r\n                    .transaction([this._store], 'readwrite')\r\n                    .objectStore(this._store)\r\n                    .clear();\r\n            request.onsuccess = e => {\r\n                resolve('Banco de dados foi limpo');\r\n            }\r\n\r\n            request.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject('Nao foi possivel limpar o banco de dados');\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n}"]}