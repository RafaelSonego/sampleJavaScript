{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","cursor","openCursor","listaNegociacoes","atual","result","dado","value","push","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;;;;;;;;;;AAAQA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAEKC,a;AAET,uCAAYC,UAAZ,EAAuB;AAAA;;AACnB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AACH;;;;6CAEQC,U,EAAW;AAAA;;AAChB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAmB;AACjC;AACA,gCAAIC,UAAU,MAAKN,WAAL,CACVO,WADU,CACE,CAAC,MAAKN,MAAN,CADF,EACiB,WADjB,EAEVO,WAFU,CAEE,MAAKP,MAFP,EAGVQ,GAHU,CAGNP,UAHM,CAAd;;AAKGI,oCAAQI,SAAR,GAAoB,aAAK;AACrBN,0CADqB,CACX;AACb,6BAFD;;AAIAE,oCAAQK,OAAR,GAAkB,aAAK;AACnBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,0CAAP;AACH,6BAHD;AAIP,yBAfM,CAAP;AAgBH;;;kDAEY;AAAA;;AACT,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;AACnC,gCAAIY,SAAS,OAAKjB,WAAL,CACIO,WADJ,CACgB,CAAC,OAAKN,MAAN,CADhB,EAC+B,WAD/B,EAEIO,WAFJ,CAEgB,OAAKP,MAFrB,EAGIiB,UAHJ,EAAb;;AAKA,gCAAIC,mBAAmB,EAAvB;;AAEAF,mCAAOP,SAAP,GAAmB,aAAI;AACnB;AACA,oCAAIU,QAAQN,EAAEC,MAAF,CAASM,MAArB;AACA,oCAAGD,KAAH,EAAS;AACL;AACA,wCAAIE,OAAOF,MAAMG,KAAjB;AACAJ,qDAAiBK,IAAjB,CAAsB,IAAI3B,UAAJ,CAAeyB,KAAKG,KAApB,EAA2BH,KAAKI,WAAhC,EAA6CJ,KAAKK,MAAlD,CAAtB;AACA;AACA;AACAP,0CAAMQ,QAAN;AACH,iCAPD,MAOM;AACFxB,4CAAQe,gBAAR;AACH;AACJ,6BAbD;;AAeAF,mCAAON,OAAP,GAAiB,aAAI;AACjBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,wCAAP;AACH,6BAHD;AAIH,yBA3BM,CAAP;AA4BH;;;iDAEW;AAAA;;AACR,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;AACnC,gCAAIC,UAAU,OAAKN,WAAL,CACLO,WADK,CACO,CAAC,OAAKN,MAAN,CADP,EACsB,WADtB,EAELO,WAFK,CAEO,OAAKP,MAFZ,EAGL4B,KAHK,EAAd;AAIAvB,oCAAQI,SAAR,GAAoB,aAAK;AACrBN,wCAAQ,0BAAR;AACH,6BAFD;;AAIAE,oCAAQK,OAAR,GAAkB,aAAK;AACnBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,0CAAP;AACH,6BAHD;AAIH,yBAbM,CAAP;AAcH","file":"NegociacaoDao.js","sourcesContent":["import {Negociacao} from '../models/Negociacao';\r\n\r\nexport class NegociacaoDao{\r\n\r\n    constructor(connection){\r\n        this._connection = connection;\r\n        this._store = 'negociacoes';\r\n    }\r\n\r\n    adiciona(negociacao){\r\n        return new Promise((resolve, reject)=>{\r\n             //Abre uma transacao de leitura e escrita para o objeto negociacoes\r\n             let request = this._connection\r\n                .transaction([this._store], 'readwrite')\r\n                .objectStore(this._store)\r\n                .add(negociacao);\r\n\r\n                request.onsuccess = e => {\r\n                    resolve();//Neste caso nao esta retornando nada dentro do resolve\r\n                };\r\n\r\n                request.onerror = e => {\r\n                    console.log(e.target.error);\r\n                    reject('Nao foi possivel adicionar a negociacao!');\r\n                };\r\n        });\r\n    }\r\n\r\n    listarTodos(){\r\n        return new Promise((resolve, reject) =>{\r\n            let cursor = this._connection\r\n                            .transaction([this._store], 'readwrite')\r\n                            .objectStore(this._store)\r\n                            .openCursor();\r\n\r\n            let listaNegociacoes = [];\r\n\r\n            cursor.onsuccess = e =>{\r\n                //Aponta para o primeiro elemento que esta gravado\r\n                let atual = e.target.result;\r\n                if(atual){\r\n                    //Retorna as propridades que foram guardadas\r\n                    var dado = atual.value;   \r\n                    listaNegociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\r\n                    //Aponta para o proximo elemento gravado\r\n                    //e chama novamente o evento onsuccess\r\n                    atual.continue();\r\n                }else {\r\n                    resolve(listaNegociacoes);\r\n                }\r\n            };\r\n\r\n            cursor.onerror = e =>{\r\n                console.log(e.target.error);\r\n                reject('Nao foi possivel listar as negociacoes');\r\n            };\r\n        });\r\n    }\r\n\r\n    apagaTodos(){\r\n        return new Promise((resolve, reject) =>{\r\n            let request = this._connection\r\n                    .transaction([this._store], 'readwrite')\r\n                    .objectStore(this._store)\r\n                    .clear();\r\n            request.onsuccess = e => {\r\n                resolve('Banco de dados foi limpo');\r\n            }\r\n\r\n            request.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject('Nao foi possivel limpar o banco de dados');\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n}"]}