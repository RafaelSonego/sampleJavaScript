{"version":3,"sources":["../../app-es6/services/HTTPService.js"],"names":["HTTPService","res","ok","Error","statusText","url","fetch","then","_handleErrors","json","dado","headers","method","body","JSON","stringify","Promise","resolve","reject","xhr","XMLHttpRequest","open","onreadystatechange","readyState","status","parse","responseText","console","log","send","setRequestHeader"],"mappings":";;;;;;IAAMA,W;;;;;;;sCAEYC,G,EAAI;AACd,gBAAG,CAACA,IAAIC,EAAR,EAAY,MAAM,IAAIC,KAAJ,CAAUF,IAAIG,UAAd,CAAN;AACZ,mBAAOH,GAAP;AACH;;;4BAEGI,G,EAAI;AAAA;;AACJ;AACA,mBAAOC,MAAMD,GAAN,EACNE,IADM,CACD;AAAA,uBAAO,MAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,aADC,EAENM,IAFM,CAED;AAAA,uBAAON,IAAIQ,IAAJ,EAAP;AAAA,aAFC,CAAP;AAGH;;;6BAEIJ,G,EAAKK,I,EAAK;AAAA;;AACX;AACA,mBAAOJ,MAAMD,GAAN,EAAW;AACdM,yBAAS,EAAE,gBAAiB,kBAAnB,EADK;AAEdC,wBAAS,MAFK,EAEG;AACjBC,sBAAMC,KAAKC,SAAL,CAAeL,IAAf,CAHQ,CAGa;AAHb,aAAX,EAKNH,IALM,CAKD;AAAA,uBAAO,OAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,aALC,CAAP;AAMH;;;+BAEMI,G,EAAI;AACP,mBAAO,IAAIW,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC;;;;;;;;AAQA,oBAAIC,MAAM,IAAIC,cAAJ,EAAV;AACA;AACAD,oBAAIE,IAAJ,CAAS,KAAT,EAAgBhB,GAAhB;AACAc,oBAAIG,kBAAJ,GAAyB,YAAM;AAC3B,wBAAGH,IAAII,UAAJ,IAAkB,CAArB,EAAuB;AACnB,4BAAGJ,IAAIK,MAAJ,IAAc,GAAjB,EAAqB;AACjB;;;;;;;;AAQAP,oCAAQH,KAAKW,KAAL,CAAWN,IAAIO,YAAf,CAAR;AACH,yBAVD,MAUK;AACDC,oCAAQC,GAAR,CAAY,qBAAqBT,IAAIO,YAArC;AACAR,mCAAOC,IAAIO,YAAX;AACH;AACJ;AACJ,iBAjBD;AAkBAP,oBAAIU,IAAJ;AACH,aA/BM,CAAP;AAgCH;;;gCAEOxB,G,EAAKK,I,EAAM;AACf,mBAAO,IAAIM,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,MAAM,IAAIC,cAAJ,EAAV;AACAD,oBAAIE,IAAJ,CAAS,MAAT,EAAiBhB,GAAjB,EAAsB,IAAtB;AACAc,oBAAIW,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;AACAX,oBAAIG,kBAAJ,GAAyB,YAAM;;AAE3B,wBAAIH,IAAII,UAAJ,IAAkB,CAAtB,EAAyB;;AAErB,4BAAIJ,IAAIK,MAAJ,IAAc,GAAlB,EAAuB;;AAEnBP,oCAAQH,KAAKW,KAAL,CAAWN,IAAIO,YAAf,CAAR;AACH,yBAHD,MAGO;;AAEHR,mCAAOC,IAAIO,YAAX;AACH;AACJ;AACJ,iBAZD;AAaAP,oBAAIU,IAAJ,CAASf,KAAKC,SAAL,CAAeL,IAAf,CAAT,EAlBoC,CAkBJ;AACnC,aAnBM,CAAP;AAqBH","file":"HTTPService.js","sourcesContent":["class HTTPService {\r\n\r\n    _handleErrors(res){\r\n        if(!res.ok) throw new Error(res.statusText);\r\n        return res;\r\n    }\r\n\r\n    get(url){\r\n        //fetch é uma promise\r\n        return fetch(url)\r\n        .then(res => this._handleErrors(res))\r\n        .then(res => res.json());\r\n    }\r\n\r\n    post(url, dado){\r\n        //para o post, iremos passar a url e um objeto contendo as informacoes para o POST\r\n        return fetch(url, {\r\n            headers: { 'content-type' : 'application/json' },\r\n            method : 'post', //método que estou chamando do HTTP\r\n            body: JSON.stringify(dado) //meu obj que será passado no post como String\r\n        })\r\n        .then(res => this._handleErrors(res));\r\n    }\r\n\r\n    getOld(url){\r\n        return new Promise((resolve, reject) => {\r\n            /*\r\n                xhr.readyState = \r\n                    0: requisiçao ainda nao iniciada\r\n                    1: conexao com o servidor estabelecida\r\n                    2: requisicao recebida\r\n                    3: processando requisicao\r\n                    4: requisicao concluida e a resposta esta pronta\r\n            */\r\n            let xhr = new XMLHttpRequest();\r\n            //Passa o metodo HTTP e qual é o endereço do serviço, Neste caso esta no mesmo servidor\r\n            xhr.open('GET', url);\r\n            xhr.onreadystatechange = () => {\r\n                if(xhr.readyState == 4){\r\n                    if(xhr.status == 200){\r\n                        /*\r\n                            xhr.responseText: recupera um Texto\r\n                            JSON.parse(xhr.responseText): Converte uma String para um array de objetos\r\n                            .map itera a lista de objetos recebendo uma funcao que para cada objeto irá criar um objeto de negociacao\r\n                            resolve(\r\n                                JSON.parse(xhr.responseText).map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor) ) \r\n                               );\r\n                        */\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    }else{\r\n                        console.log('Ocorreu um erro!' + xhr.responseText);\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            }\r\n            xhr.send();\r\n        });\r\n    }\r\n\r\n    postOld(url, dado) {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open(\"POST\", url, true);\r\n            xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n            xhr.onreadystatechange = () => {\r\n\r\n                if (xhr.readyState == 4) {\r\n\r\n                    if (xhr.status == 200) {\r\n\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    } else {\r\n\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            };\r\n            xhr.send(JSON.stringify(dado)); // usando JSON.stringify para converter objeto em uma string no formato JSON.\r\n        });\r\n\r\n    }    \r\n\r\n}"]}