{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["ConnectionFactory","stores","version","dbName","connection","close","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;AAAA,IAAIA,oBAAqB,YAAW;AAAE;AAClC,QAAMC,SAAS,CAAC,aAAD,CAAf;AACA,QAAMC,UAAU,CAAhB;AACA,QAAMC,SAAS,aAAf;;AAEA,QAAIC,aAAa,IAAjB;AACA,QAAIC,KAAJ;AACA;AAEI,qCAAa;AAAA;;AACT,kBAAMC,MAAM,sDAAN,CAAN;AACH;;AAJL;AAAA;AAAA,4CAM0B;;AAElB,uBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;AACnC,wBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBV,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAQ,gCAAYI,eAAZ,GAA8B,aAAK;AAC/B;AACAd,0CAAkBe,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,qBAHD;;AAKAR,gCAAYS,SAAZ,GAAwB,aAAK;AACzB,4BAAG,CAACf,UAAJ,EAAe;AACXA,yCAAaY,EAAEC,MAAF,CAASC,MAAtB;AACAb,oCAAQD,WAAWC,KAAX,CAAiBe,IAAjB,CAAsBhB,UAAtB,CAAR;AACAA,uCAAWC,KAAX,GAAmB,YAAU;AACzB,sCAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACH,6BAFD;AAGH;AACDE,gCAAQJ,UAAR;AACH,qBATD;;AAWAM,gCAAYW,OAAZ,GAAsB,aAAK;AACvBC,gCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,+BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,qBAHD;AAOH,iBA1BM,CAAP;AA2BH;AAnCL;AAAA;AAAA,0CAqCyBrB,UArCzB,EAqCoC;AAC5BH,uBAAOyB,OAAP,CAAe,iBAAQ;AACnB,wBAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAA+C;AAC3CzB,mCAAW0B,iBAAX,CAA6BD,KAA7B;AACH;AACDzB,+BAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,iBALD;AAMH;AA5CL;AAAA;AAAA,8CA8C4B;AACpB,oBAAG5B,UAAH,EAAc;AACVC;AACAD,iCAAa,IAAb;AACH;AACJ;AAnDL;;AAAA;AAAA;AAqDH,CA5DuB,EAAxB,C,CA4DK","file":"ConnectionFactory.js","sourcesContent":["var ConnectionFactory = (function (){ //Funcao anonima\r\n    const stores = ['negociacoes'];\r\n    const version = 4;\r\n    const dbName = 'sonegoTeste';\r\n\r\n    var connection = null;\r\n    var close;\r\n    return class ConnectionFactory {\r\n    \r\n        constructor(){\r\n            throw Error('Nao é possivel criar instancias de ConnectionFactory');\r\n        }\r\n    \r\n        static getConnection(){\r\n    \r\n            return new Promise((resolve, reject) =>{\r\n                let openRequest = window.indexedDB.open(dbName, version);\r\n    \r\n                openRequest.onupgradeneeded = e => {\r\n                    //e.target.result: Retorna uma connection\r\n                    ConnectionFactory._createStores(e.target.result);\r\n                }\r\n    \r\n                openRequest.onsuccess = e => {\r\n                    if(!connection){\r\n                        connection = e.target.result;\r\n                        close = connection.close.bind(connection);\r\n                        connection.close = function(){\r\n                            throw new Error('Nao é possível fechar a conexao diretamente!');\r\n                        }\r\n                    }\r\n                    resolve(connection);\r\n                }\r\n    \r\n                openRequest.onerror = e => {\r\n                    console.log(e.target.error);\r\n                    reject(e.target.error.name);\r\n                }\r\n    \r\n    \r\n    \r\n            });\r\n        }\r\n    \r\n        static _createStores(connection){\r\n            stores.forEach(store =>{\r\n                if(connection.objectStoreNames.contains(store)){\r\n                    connection.deleteObjectStore(store);\r\n                }\r\n                connection.createObjectStore(store, {autoIncrement: true});\r\n            });\r\n        }\r\n\r\n        static closeConnection(){\r\n            if(connection){\r\n                close();\r\n                connection = null;\r\n            }\r\n        }\r\n    }\r\n})();//será carregada e logo depois executada!\r\n\r\n\r\n"]}