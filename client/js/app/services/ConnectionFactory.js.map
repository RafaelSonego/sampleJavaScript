{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,a;AAEXC,sB,GAAa,I;AACbC,iB;;yCACSC,iB;AAET,6CAAa;AAAA;;AACT,0BAAMC,MAAM,sDAAN,CAAN;AACH;;;;oDAEqB;;AAElB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;AACnC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/B;AACAT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAHD;;AAKAR,wCAAYS,SAAZ,GAAwB,aAAK;AACzB,oCAAG,CAAChB,UAAJ,EAAe;AACXA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAU;AACzB,8CAAM,IAAIE,KAAJ,CAAU,8CAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AACH,6BATD;;AAWAO,wCAAYW,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAIH,yBAvBM,CAAP;AAwBH;;;kDAEoBtB,U,EAAW;AAC5BH,+BAAO0B,OAAP,CAAe,iBAAQ;AACnB,gCAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAA+C;AAC3C1B,2CAAW2B,iBAAX,CAA6BD,KAA7B;AACH;AACD1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,yBALD;AAMH;;;sDAEuB;AACpB,4BAAG7B,UAAH,EAAc;AACVC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["\r\nconst stores = ['negociacoes'];\r\nconst version = 4;\r\nconst dbName = 'sonegoTeste';\r\n\r\nlet connection = null;\r\nlet close;\r\nexport class ConnectionFactory {\r\n\r\n    constructor(){\r\n        throw Error('Nao é possivel criar instancias de ConnectionFactory');\r\n    }\r\n\r\n    static getConnection(){\r\n\r\n        return new Promise((resolve, reject) =>{\r\n            let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n            openRequest.onupgradeneeded = e => {\r\n                //e.target.result: Retorna uma connection\r\n                ConnectionFactory._createStores(e.target.result);\r\n            }\r\n\r\n            openRequest.onsuccess = e => {\r\n                if(!connection){\r\n                    connection = e.target.result;\r\n                    close = connection.close.bind(connection);\r\n                    connection.close = function(){\r\n                        throw new Error('Nao é possível fechar a conexao diretamente!');\r\n                    }\r\n                }\r\n                resolve(connection);\r\n            }\r\n\r\n            openRequest.onerror = e => {\r\n                console.log(e.target.error);\r\n                reject(e.target.error.name);\r\n            }\r\n        });\r\n    }\r\n\r\n    static _createStores(connection){\r\n        stores.forEach(store =>{\r\n            if(connection.objectStoreNames.contains(store)){\r\n                connection.deleteObjectStore(store);\r\n            }\r\n            connection.createObjectStore(store, {autoIncrement: true});\r\n        });\r\n    }\r\n\r\n    static closeConnection(){\r\n        if(connection){\r\n            close();\r\n            connection = null;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n"]}