{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_httpService","HTTPService","get","then","listaNegociacoes","map","Negociacao","Date","obj","data","quantidade","valor","catch","console","log","error","Error","Promise","all","obterNegociacaoDaSemana","obterNegociacaoDaAnterior","obterNegociacaoDaRetrasada","arrayTodasNegociacoesPorPeriodo","reduce","newArray","array","concat","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listarTodos","apagaTodos","mensagem","listaAtual","obterTodasAsNegociacoes","filter","some","equals","negociacaoExistente","erro"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["class NegociacaoService{\r\n    constructor(){\r\n        this._httpService = new HTTPService();\r\n    }\r\n\r\n    obterNegociacaoDaSemana(){\r\n        return this._httpService\r\n            .get('negociacoes/semana') //get irá retornar um Promise\r\n            .then(listaNegociacoes => {\r\n                return listaNegociacoes.map(obj => {\r\n                    return new Negociacao(new Date(obj.data), obj.quantidade, obj.valor);\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw new Error('Não foi possível obter as negociacoes da semana');\r\n            });\r\n    }\r\n\r\n    obterNegociacaoDaAnterior(){\r\n        return this._httpService\r\n            .get('negociacoes/anterior') //get irá retornar um Promise\r\n            .then(listaNegociacoes => {\r\n                return listaNegociacoes.map(obj => {\r\n                    return new Negociacao(new Date(obj.data), obj.quantidade, obj.valor);\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw new Error('Não foi possível obter as negociacoes da semana anterior');\r\n            });\r\n    }\r\n\r\n    obterNegociacaoDaRetrasada(){\r\n        return this._httpService\r\n            .get('negociacoes/retrasada') //get irá retornar um Promise\r\n            .then(listaNegociacoes => {\r\n                return listaNegociacoes.map(obj => {\r\n                    return new Negociacao(new Date(obj.data), obj.quantidade, obj.valor);\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw new Error('Não foi possível obter as negociacoes da semana retrasada');\r\n            });\r\n    }\r\n\r\n    obterTodasAsNegociacoes(){\r\n        return Promise\r\n                .all([\r\n                        this.obterNegociacaoDaSemana(), \r\n                        this.obterNegociacaoDaAnterior(),\r\n                        this.obterNegociacaoDaRetrasada()\r\n                    ])\r\n                .then((arrayTodasNegociacoesPorPeriodo) => {\r\n                    //arrayListaNegociacoes: Como cada promise retorna um array, o retorno do Promise.all será um array de array de negociacoes\r\n                    //Utiliza o reduce para criar um unico array de negociacoes\r\n                    let listaNegociacoes = arrayTodasNegociacoesPorPeriodo\r\n                        //reduce recebe dois parametros, uma funcao e o valor de inicializacao do novo array neste caso                        \r\n                        .reduce((newArray, array) => newArray.concat(array), []);\r\n                    return listaNegociacoes;\r\n                })\r\n                .catch(error => {\r\n                    throw new Error(error);\r\n                });\r\n    }\r\n\r\n    cadastrar(negociacao){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection)) //retorna um dao\r\n            .then(dao => dao.adiciona(negociacao)) //Persiste no banco indexeddb\r\n            .then(() => 'Negociacao adicionada com sucesso!')\r\n            .catch(() => {\r\n                throw new Error('Nao foi possivel adicionar a negociacao');\r\n            });\r\n    }\r\n\r\n    listar(){\r\n        //Chamando o metodo listartodos do dado que esta no DAO e para cada um que recuperar ja estou adicionando na lista para carregar assim que a pagina for aberta\r\n        // Na programacao funcional , sabemos que se tiver uma linha, nao precisamos colocar o return\r\n        return ConnectionFactory\r\n            .getConnection() // minha getConnection retorna uma connection que precisamos saber para utilizar o then\r\n                .then(connection => new NegociacaoDao(connection)) // com a connection, instancio o NegociacaoDao passando a connection como parametro\r\n                .then(dao => dao.listarTodos()) // resolve esta retornando uma lista de negociacoes que poderei pegar no then\r\n                .catch(error => {\r\n                    throw new Error('Nao foi possivel listar as negociacoes');\r\n                });\r\n    }\r\n\r\n    apagarNegociacoes(){\r\n        return ConnectionFactory\r\n                .getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                .then(dao => dao.apagaTodos())\r\n                .then(mensagem => {\r\n                    return mensagem;\r\n                })\r\n                .catch(error => {\r\n                    return error;\r\n                });\r\n    }\r\n\r\n    importarNegociacoes(listaAtual){\r\n        //É um for dentro de um for neste caso, \r\n        //No filter, cada elemento (negociacao) será comparado com o Negociacao existente de uma lista já existente\r\n        return this.obterTodasAsNegociacoes()\r\n                .then(listaNegociacoes => //Recupera as novas negociacoes que serão importadas\r\n                    listaNegociacoes.filter(negociacao => //Para cada uma, através do metodo some, será comparado com uma lista já existente verificando se está duplicada\r\n                        !listaAtual.some(negociacaoExistente => //Resultado do some é um boolean que caso seja verdadeiro é pq o item já está na lista\r\n                            negociacao.equals(negociacaoExistente) //equals nao existe no JS, implementei na mao utilizando o JSON.stringigy\r\n                        ))\r\n                )\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error('Não foi possível importar as negociações');\r\n                });\r\n    }\r\n\r\n}"]}