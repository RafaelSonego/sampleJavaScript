{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HTTPService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_httpService","get","then","listaNegociacoes","map","Date","obj","data","quantidade","valor","catch","console","log","error","Error","Promise","all","obterNegociacaoDaSemana","obterNegociacaoDaAnterior","obterNegociacaoDaRetrasada","arrayTodasNegociacoesPorPeriodo","reduce","newArray","array","concat","negociacao","getConnection","connection","dao","adiciona","listarTodos","apagaTodos","mensagem","listaAtual","obterTodasAsNegociacoes","filter","some","equals","negociacaoExistente","erro"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HTTPService} from './HTTPService';\r\nimport {ConnectionFactory} from './ConnectionFactory';\r\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\r\nimport {Negociacao} from '../models/Negociacao';\r\n\r\nexport class NegociacaoService{\r\n    constructor(){\r\n        this._httpService = new HTTPService();\r\n    }\r\n\r\n    obterNegociacaoDaSemana(){\r\n        return this._httpService\r\n            .get('negociacoes/semana') //get irá retornar um Promise\r\n            .then(listaNegociacoes => {\r\n                return listaNegociacoes.map(obj => {\r\n                    return new Negociacao(new Date(obj.data), obj.quantidade, obj.valor);\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw new Error('Não foi possível obter as negociacoes da semana');\r\n            });\r\n    }\r\n\r\n    obterNegociacaoDaAnterior(){\r\n        return this._httpService\r\n            .get('negociacoes/anterior') //get irá retornar um Promise\r\n            .then(listaNegociacoes => {\r\n                return listaNegociacoes.map(obj => {\r\n                    return new Negociacao(new Date(obj.data), obj.quantidade, obj.valor);\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw new Error('Não foi possível obter as negociacoes da semana anterior');\r\n            });\r\n    }\r\n\r\n    obterNegociacaoDaRetrasada(){\r\n        return this._httpService\r\n            .get('negociacoes/retrasada') //get irá retornar um Promise\r\n            .then(listaNegociacoes => {\r\n                return listaNegociacoes.map(obj => {\r\n                    return new Negociacao(new Date(obj.data), obj.quantidade, obj.valor);\r\n                });\r\n            })\r\n            .catch(error => {\r\n                console.log(error);\r\n                throw new Error('Não foi possível obter as negociacoes da semana retrasada');\r\n            });\r\n    }\r\n\r\n    obterTodasAsNegociacoes(){\r\n        return Promise\r\n                .all([\r\n                        this.obterNegociacaoDaSemana(), \r\n                        this.obterNegociacaoDaAnterior(),\r\n                        this.obterNegociacaoDaRetrasada()\r\n                    ])\r\n                .then((arrayTodasNegociacoesPorPeriodo) => {\r\n                    //arrayListaNegociacoes: Como cada promise retorna um array, o retorno do Promise.all será um array de array de negociacoes\r\n                    //Utiliza o reduce para criar um unico array de negociacoes\r\n                    let listaNegociacoes = arrayTodasNegociacoesPorPeriodo\r\n                        //reduce recebe dois parametros, uma funcao e o valor de inicializacao do novo array neste caso                        \r\n                        .reduce((newArray, array) => newArray.concat(array), []);\r\n                    return listaNegociacoes;\r\n                })\r\n                .catch(error => {\r\n                    throw new Error(error);\r\n                });\r\n    }\r\n\r\n    cadastrar(negociacao){\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection)) //retorna um dao\r\n            .then(dao => dao.adiciona(negociacao)) //Persiste no banco indexeddb\r\n            .then(() => 'Negociacao adicionada com sucesso!')\r\n            .catch(() => {\r\n                throw new Error('Nao foi possivel adicionar a negociacao');\r\n            });\r\n    }\r\n\r\n    listar(){\r\n        //Chamando o metodo listartodos do dado que esta no DAO e para cada um que recuperar ja estou adicionando na lista para carregar assim que a pagina for aberta\r\n        // Na programacao funcional , sabemos que se tiver uma linha, nao precisamos colocar o return\r\n        return ConnectionFactory\r\n            .getConnection() // minha getConnection retorna uma connection que precisamos saber para utilizar o then\r\n                .then(connection => new NegociacaoDao(connection)) // com a connection, instancio o NegociacaoDao passando a connection como parametro\r\n                .then(dao => dao.listarTodos()) // resolve esta retornando uma lista de negociacoes que poderei pegar no then\r\n                .catch(error => {\r\n                    throw new Error('Nao foi possivel listar as negociacoes');\r\n                });\r\n    }\r\n\r\n    apagarNegociacoes(){\r\n        return ConnectionFactory\r\n                .getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                .then(dao => dao.apagaTodos())\r\n                .then(mensagem => {\r\n                    return mensagem;\r\n                })\r\n                .catch(error => {\r\n                    return error;\r\n                });\r\n    }\r\n\r\n    importarNegociacoes(listaAtual){\r\n        //É um for dentro de um for neste caso, \r\n        //No filter, cada elemento (negociacao) será comparado com o Negociacao existente de uma lista já existente\r\n        return this.obterTodasAsNegociacoes()\r\n                .then(listaNegociacoes => //Recupera as novas negociacoes que serão importadas\r\n                    listaNegociacoes.filter(negociacao => //Para cada uma, através do metodo some, será comparado com uma lista já existente verificando se está duplicada\r\n                        !listaAtual.some(negociacaoExistente => //Resultado do some é um boolean que caso seja verdadeiro é pq o item já está na lista\r\n                            negociacao.equals(negociacaoExistente) //equals nao existe no JS, implementei na mao utilizando o JSON.stringigy\r\n                        ))\r\n                )\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    throw new Error('Não foi possível importar as negociações');\r\n                });\r\n    }\r\n\r\n}"]}